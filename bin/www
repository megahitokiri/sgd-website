#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app   = require('../app');
var debug = require('debug')('sgd-website:server');
var http  = require('http');
var https = require('https');
var helmet = require('helmet');
var ms     = require('ms');
var fs     = require('fs');
var enforceSSL = require('express-enforces-ssl');

/**
* Security settings
*/
app.disable('x-powered-by');  // do not advertise Express
app.enable('trust proxy');    // use SSL
app.use(enforceSSL());        // enforce SSL
app.use(helmet.hsts({         // enforces SSL on subdomains
  maxAge: ms('1 year'),
  includeSubdomains: true
}));
app.use(helmet.xssFilter());  // prevent cross-site attacks
app.use(helmet.frameguard('sameorigin')); // prevent clickjacking by disallowing anyone to put site in a frame
//app.use(helmet.noSniff());    //  do not let browsers infer file type (disabled until uploads allowed)

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
console.log("listening on port", port);
app.set('port', port);

/**
 * Create HTTP server.
 */
var httpsOptions = {
  key: fs.readFileSync("/etc/ssl/certs/sunflowergenome.key"),
  cert: fs.readFileSync("/etc/ssl/certs/sunflowergenome.crt")
};
var httpsServer = https.createServer(httpsOptions, app);
var httpServer  = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

httpServer.listen(80); // 80
httpServer.on('error', onError);
httpServer.on('listening', onListening);

httpsServer.listen(443); // 443
httpsServer.on('error', onError);
httpsServer.on('listening', onListening);
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  //var addr = server.address();
  var addr = this.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
